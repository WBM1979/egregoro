# egregoro_main.py

from egos.ensinar.ensinar import ensinar
from egos.executar.executar import executar
from egos.ver.ver import ver
from egos.conversar.conversar import conversar
from fastapi import FastAP
app = FastAPI()

from dotenv import load_dotenv
import os

# Carregar as vari√°veis de ambiente do arquivo .env
load_dotenv()

# Definir a vari√°vel ARQUIVO_APRENDIZADO usando a vari√°vel de ambiente
ARQUIVO_APRENDIZADO = os.getenv('ARQUIVO_APRENDIZADO', 'Aprendizados.json')

@app.get("/")
def raiz():
    return {"mensagem": "Egregoro online e ativa."}
# (Futuramente, importar os egos e falanges aqui)
# from egregoro.egos.meu_ego import MeuEgo

class EgregoroKernel:
    def __init__(self):
        self.memoria = []  # mem√≥ria simples de contexto
        self.falanges = {}  # futura estrutura para grupos de egos

    def processar_entrada(self, entrada):
        if entrada.startswith("ensinar:"):
            return ensinar(entrada.replace("ensinar:", "").strip())

        elif entrada.startswith("ver:"):
            return ver(entrada.replace("ver:", "").strip())

        elif entrada.startswith("executar:"):
            return executar(entrada.replace("executar:", "").strip())

        elif entrada.startswith("conversar:"):
            return conversar(entrada.replace("conversar:", "").strip())

        else:
            return "Ainda estou aprendendo... diga outra coisa."

def main():
    egregoro = EgregoroKernel()
    print("üß† Egregoro est√° ativa. Digite 'sair' para encerrar.")

    while True:
        entrada = input("Voc√™: ")
        if entrada.lower() == 'sair':
            print("Egregoro: Encerrando sess√£o...")
            break
        resposta = egregoro.processar_entrada(entrada)
        print("Egregoro:", resposta)

if __name__ == "__main__":
    main()


# egregoro_main.py

"""
Arquivo principal que inicia a IA distribu√≠da Egregoro.
Respons√°vel por montar os egos, falanges e supereg√¥s e iniciar a API.
"""

# Importa os m√≥dulos principais da arquitetura
from core.ego import Ego
from core.falange import Falange
from core.superego import SuperEgo
from network.api import start_api

import asyncio

def criar_estrutura_inicial():
    """
    Cria uma estrutura de exemplo com egos, falange e superego.
    Em breve, isso pode ser carregado de um arquivo JSON ou banco de dados.
    """

    # Cria√ß√£o de egos simples com suas habilidades
    ego_matematico = Ego("Ego Matem√°tico", ["calculo", "logica"])
    ego_dedutivo = Ego("Ego Dedutivo", ["dedu√ß√£o", "racioc√≠nio"])

    # Formamos uma falange com esses egos
    falange_analise = Falange("Falange de An√°lise", [ego_matematico, ego_dedutivo])

    # Formamos um superego com essa falange
    superego_central = SuperEgo("SuperEgo Central", [falange_analise])

    return superego_central

async def main():
    """
    Fun√ß√£o principal da Egregoro. Aqui iniciamos tudo.
    """
    print("[Egregoro] Inicializando...")

    # Monta a hierarquia inicial
    superego = criar_estrutura_inicial()

    print(f"[Egregoro] Superego carregado: {superego.nome}")

    # Inicia a API (FastAPI + Uvicorn)
    await start_api()

# Executa a fun√ß√£o principal usando asyncio
if __name__ == "__main__":
    asyncio.run(main())
import os
import json
import subprocess

ARQUIVO_APRENDIZADO = "Aprendizados.json"

def atualizar_repositorio():
    print("üîÑ Verificando atualiza√ß√µes no reposit√≥rio Git...")
    try:
        resultado = subprocess.run(["git", "pull"], cwd=os.path.dirname(__file__), capture_output=True, text=True)
        print(resultado.stdout)
        if "Already up to date." not in resultado.stdout:
            print("‚úÖ Reposit√≥rio atualizado com sucesso.")
        else:
            print("üü¢ J√° est√° na vers√£o mais recente.")
    except Exception as e:
        print("‚ö†Ô∏è Erro ao atualizar o reposit√≥rio:", str(e))

def carregar_aprendizados():
    if os.path.exists(ARQUIVO_APRENDIZADO):
        try:
            with open(ARQUIVO_APRENDIZADO, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            print("‚ö†Ô∏è Erro ao ler o arquivo de aprendizados. Criando novo...")
    return {}

def salvar_aprendizados(aprendizados):
    try:
        with open(ARQUIVO_APRENDIZADO, 'w', encoding='utf-8') as f:
            json.dump(aprendizados, f, indent=4, ensure_ascii=False)
    except Exception as e:
        print("‚ùå Erro ao salvar aprendizados:", str(e))

def ensinar():
    aprendizados = carregar_aprendizados()
    chave = input("üß† Digite o comando que voc√™ quer ensinar: ").strip()
    resposta = input("üó£Ô∏è E qual √© a resposta que devo dar?: ").strip()
    if chave:
        aprendizados[chave.lower()] = resposta
        salvar_aprendizados(aprendizados)
        print("‚úÖ Comando aprendido com sucesso!")
    else:
        print("‚ö†Ô∏è Comando vazio. Nada foi salvo.")

def executar():
    aprendizados = carregar_aprendizados()
    comando = input("üîé O que deseja executar?: ").strip().lower()
    if comando in aprendizados:
        print("ü§ñ", aprendizados[comando])
    else:
        print("‚ùå Eu ainda n√£o aprendi isso.")

def ver_aprendizados():
    aprendizados = carregar_aprendizados()
    if aprendizados:
        print("üìö Comandos aprendidos:")
        for chave, valor in aprendizados.items():
            print(f"‚Ä¢ {chave} => {valor}")
    else:
        print("üòï Ainda n√£o aprendi nada.")

def conversar():
    aprendizados = carregar_aprendizados()
    print("üí¨ Vamos conversar! (digite 'sair' para encerrar a conversa)\n")
    while True:
        entrada = input("üë§ Voc√™: ").strip().lower()
        if entrada == "sair":
            print("üëã At√© logo!")
            break
        resposta = aprendizados.get(entrada, "ü§ñ Ainda n√£o aprendi isso.")
        print("ü§ñ Egregoro:", resposta)

def menu():
    while True:
        print("\n===== üåê Egregoro IA =====")
        print("1. Ensinar comando")
        print("2. Executar comando")
        print("3. Ver aprendizados")
        print("4. Conversar livremente")
        print("5. Sair")

        escolha = input("Escolha uma op√ß√£o: ").strip()

        if escolha == "1":
            ensinar()
        elif escolha == "2":
            executar()
        elif escolha == "3":
            ver_aprendizados()
        elif escolha == "4":
            conversar()
        elif escolha == "5":
            print("üõë Encerrando Egregoro...")
            break
        else:
            print("‚ùó Op√ß√£o inv√°lida. Tente novamente.")

if __name__ == "__main__":
    atualizar_repositorio()
    menu()
import os
import json
import subprocess
from egregoro.egos.ensinar import ensinar
from egregoro.egos.executar import executar
from egregoro.egos.ver import ver
from egregoro.egos.conversar import conversar

# Nome do arquivo que cont√©m os aprendizados
ARQUIVO_APRENDIZADO = "Aprendizados.json"

# Fun√ß√£o para verificar e atualizar o reposit√≥rio Git
def atualizar_repositorio():
    print("üîÑ Verificando atualiza√ß√µes no reposit√≥rio Git...")
    try:
        # Comando git pull para atualizar o reposit√≥rio
        resultado = subprocess.run(["git", "pull"], cwd=os.path.dirname(__file__), capture_output=True, text=True)
        print(resultado.stdout)
        if "Already up to date." not in resultado.stdout:
            print("‚úÖ Reposit√≥rio atualizado com sucesso.")
        else:
            print("üü¢ J√° est√° na vers√£o mais recente.")
    except Exception as e:
        print("‚ö†Ô∏è Erro ao atualizar o reposit√≥rio:", str(e))

# Fun√ß√£o para carregar os aprendizados do arquivo JSON
def carregar_aprendizados():
    if os.path.exists(ARQUIVO_APRENDIZADO):
        with open(ARQUIVO_APRENDIZADO, 'r') as f:
            return json.load(f)
    return {}

# Fun√ß√£o para salvar os aprendizados no arquivo JSON
def salvar_aprendizados(aprendizados):
    with open(ARQUIVO_APRENDIZADO, 'w') as f:
        json.dump(aprendizados, f, indent=4)

# Fun√ß√£o que exibe o menu principal e chama as respectivas fun√ß√µes de acordo com a escolha do usu√°rio
def menu():
    while True:
        print("\n===== üåê Egregoro IA =====")
        print("1. Ensinar comando")
        print("2. Executar comando")
        print("3. Ver aprendizados")
        print("4. Conversar livremente")
        print("5. Sair")

        escolha = input("Escolha uma op√ß√£o: ").strip()

        if escolha == "1":
            ensinar()
        elif escolha == "2":
            executar()
        elif escolha == "3":
            ver()
        elif escolha == "4":
            conversar()
        elif escolha == "5":
            print("üõë Encerrando Egregoro...")
            break
        else:
            print("‚ùó Op√ß√£o inv√°lida. Tente novamente.")

# Fun√ß√£o principal que chama as outras fun√ß√µes
if __name__ == "__main__":
    atualizar_repositorio()  # Verifica e atualiza o reposit√≥rio
    menu()  # Chama o menu de op√ß√µes
# Importa√ß√£o das bibliotecas necess√°rias
import os
import json
import subprocess
from dotenv import load_dotenv
from egos.executar import executar  # Corre√ß√£o no caminho de importa√ß√£o

# Carregamento das vari√°veis de ambiente a partir do arquivo .env
load_dotenv()

# Vari√°vel de ambiente ARQUIVO_APRENDIZADO que recebe o caminho do arquivo de aprendizados
ARQUIVO_APRENDIZADO = os.getenv('ARQUIVO_APRENDIZADO', 'Aprendizados.json')

# Fun√ß√£o para atualizar o reposit√≥rio Git
def atualizar_repositorio():
    """
    Esta fun√ß√£o realiza a atualiza√ß√£o do reposit√≥rio Git, puxando as √∫ltimas modifica√ß√µes.
    """
    print("üîÑ Verificando atualiza√ß√µes no reposit√≥rio Git...")
    try:
        # Executa o comando 'git pull' para atualizar o reposit√≥rio
        resultado = subprocess.run(["git", "pull"], cwd=os.path.dirname(__file__), capture_output=True, text=True)
        print(resultado.stdout)
        
        # Verifica se o reposit√≥rio foi atualizado ou se j√° est√° na vers√£o mais recente
        if "Already up to date." not in resultado.stdout:
            print("‚úÖ Reposit√≥rio atualizado com sucesso.")
        else:
            print("üü¢ J√° est√° na vers√£o mais recente.")
    except Exception as e:
        # Caso ocorra algum erro, imprime a mensagem
        print("‚ö†Ô∏è Erro ao atualizar o reposit√≥rio:", str(e))

# Fun√ß√£o para carregar os aprendizados de um arquivo JSON
def carregar_aprendizados():
    """
    Carrega os aprendizados salvos no arquivo ARQUIVO_APRENDIZADO.
    Se o arquivo n√£o existir, retorna um dicion√°rio vazio.
    """
    if os.path.exists(ARQUIVO_APRENDIZADO):
        with open(ARQUIVO_APRENDIZADO, 'r') as f:
            return json.load(f)
    return {}

# Fun√ß√£o para salvar os aprendizados no arquivo ARQUIVO_APRENDIZADO
def salvar_aprendizados(aprendizados):
    """
    Salva o dicion√°rio de aprendizados no arquivo JSON especificado.
    """
    with open(ARQUIVO_APRENDIZADO, 'w') as f:
        json.dump(aprendizados, f, indent=4)

# Fun√ß√£o para ensinar um novo comando
def ensinar():
    """
    Solicita ao usu√°rio um novo comando e a resposta associada,
    e salva isso no arquivo de aprendizados.
    """
    aprendizados = carregar_aprendizados()
    
    # Solicita o comando e a resposta ao usu√°rio
    chave = input("üß† Digite o comando que voc√™ quer ensinar: ").strip()
    resposta = input("üó£Ô∏è E qual √© a resposta que devo dar?: ").strip()
    
    # Adiciona o comando ao dicion√°rio de aprendizados
    aprendizados[chave.lower()] = resposta
    
    # Salva o dicion√°rio de aprendizados atualizado
    salvar_aprendizados(aprendizados)
    
    # Informa que o comando foi aprendido com sucesso
    print("‚úÖ Comando aprendido com sucesso!")

# Fun√ß√£o para executar um comando aprendido
def executar():
    """
    Executa um comando aprendido, mostrando a resposta associada.
    Se o comando n√£o foi aprendido, informa que ainda n√£o foi registrado.
    """
    aprendizados = carregar_aprendizados()
    
    # Solicita ao usu√°rio o comando que deseja executar
    comando = input("üîé O que deseja executar?: ").strip().lower()
    
    # Verifica se o comando est√° registrado nos aprendizados
    if comando in aprendizados:
        print("ü§ñ", aprendizados[comando])
    else:
        print("‚ùå Eu ainda n√£o aprendi isso.")

# Fun√ß√£o para exibir todos os aprendizados
def ver_aprendizados():
    """
    Exibe todos os comandos e suas respostas armazenadas no arquivo de aprendizados.
    """
    aprendizados = carregar_aprendizados()
    
    if aprendizados:
        print("üìö Comandos aprendidos:")
        # Exibe cada comando e a resposta associada
        for chave, valor in aprendizados.items():
            print(f"‚Ä¢ {chave} => {valor}")
    else:
        print("üòï Ainda n√£o aprendi nada.")

# Fun√ß√£o para conversar com o sistema
def conversar():
    """
    Permite uma conversa livre com o sistema. O usu√°rio pode digitar comandos que
    foram ensinados ou digitar 'sair' para encerrar a conversa.
    """
    aprendizados = carregar_aprendizados()
    print("üí¨ Vamos conversar! (digite 'sair' para encerrar a conversa)\n")
    
    while True:
        entrada = input("üë§ Voc√™: ").strip().lower()
        
        # Encerra a conversa se o usu√°rio digitar 'sair'
        if entrada == "sair":
            print("üëã At√© logo!")
            break
        
        # Verifica se a entrada do usu√°rio est√° registrada
        resposta = aprendizados.get(entrada, "ü§ñ Ainda n√£o aprendi isso.")
        print("ü§ñ Egregoro:", resposta)

# Fun√ß√£o principal do programa, que exibe o menu e executa as op√ß√µes do usu√°rio
def menu():
    """
    Exibe o menu principal com as op√ß√µes dispon√≠veis e executa a a√ß√£o escolhida pelo usu√°rio.
    """
    while True:
        print("\n===== üåê Egregoro IA =====")
        print("1. Ensinar comando")
        print("2. Executar comando")
        print("3. Ver aprendizados")
        print("4. Conversar livremente")
        print("5. Sair")

        # Solicita a escolha do usu√°rio
        escolha = input("Escolha uma op√ß√£o: ").strip()

        if escolha == "1":
            ensinar()
        elif escolha == "2":
            executar()
        elif escolha == "3":
            ver_aprendizados()
        elif escolha == "4":
            conversar()
        elif escolha == "5":
            print("üõë Encerrando Egregoro...")
            break
        else:
            print("‚ùó Op√ß√£o inv√°lida. Tente novamente.")

# Execu√ß√£o do programa
if __name__ == "__main__":
    atualizar_repositorio()  # Atualiza o reposit√≥rio antes de iniciar
    menu()  # Inicia o menu do sistema
import os
import json
import subprocess
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente do arquivo .env
load_dotenv()

# Caminho para o arquivo de aprendizados
ARQUIVO_APRENDIZADO = os.getenv('ARQUIVO_APRENDIZADO', 'Aprendizados.json')

# Adicionar o diret√≥rio atual ao sys.path para garantir que o Python encontre os pacotes locais
import sys
sys.path.append(os.path.abspath(os.path.dirname(__file__)))

# Importa√ß√£o do m√≥dulo executar de egos
from egos.executar import executar

def atualizar_repositorio():
    print("üîÑ Verificando atualiza√ß√µes no reposit√≥rio Git...")
    try:
        resultado = subprocess.run(["git", "pull"], cwd=os.path.dirname(__file__), capture_output=True, text=True)
        print(resultado.stdout)
        if "Already up to date." not in resultado.stdout:
            print("‚úÖ Reposit√≥rio atualizado com sucesso.")
        else:
            print("üü¢ J√° est√° na vers√£o mais recente.")
    except Exception as e:
        print("‚ö†Ô∏è Erro ao atualizar o reposit√≥rio:", str(e))

def carregar_aprendizados():
    """
    Fun√ß√£o para carregar os aprendizados de um arquivo JSON.
    Retorna um dicion√°rio de aprendizados ou um dicion√°rio vazio se o arquivo n√£o existir.
    """
    if os.path.exists(ARQUIVO_APRENDIZADO):
        with open(ARQUIVO_APRENDIZADO, 'r') as f:
            return json.load(f)
    return {}

def salvar_aprendizados(aprendizados):
    """
    Fun√ß√£o para salvar os aprendizados em um arquivo JSON.
    """
    with open(ARQUIVO_APRENDIZADO, 'w') as f:
        json.dump(aprendizados, f, indent=4)

def ensinar():
    """
    Fun√ß√£o para ensinar um novo comando e sua resposta.
    """
    aprendizados = carregar_aprendizados()
    chave = input("üß† Digite o comando que voc√™ quer ensinar: ").strip()
    resposta = input("üó£Ô∏è E qual √© a resposta que devo dar?: ").strip()
    aprendizados[chave.lower()] = resposta
    salvar_aprendizados(aprendizados)
    print("‚úÖ Comando aprendido com sucesso!")

def executar_comando():
    """
    Fun√ß√£o para executar um comando baseado nos aprendizados.
    """
    aprendizados = carregar_aprendizados()
    comando = input("üîé O que deseja executar?: ").strip().lower()
    if comando in aprendizados:
        print("ü§ñ", aprendizados[comando])
    else:
        print("‚ùå Eu ainda n√£o aprendi isso.")

def ver_aprendizados():
    """
    Fun√ß√£o para ver todos os aprendizados salvos.
    """
    aprendizados = carregar_aprendizados()
    if aprendizados:
        print("üìö Comandos aprendidos:")
        for chave, valor in aprendizados.items():
            print(f"‚Ä¢ {chave} => {valor}")
    else:
        print("üòï Ainda n√£o aprendi nada.")

def conversar():
    """
    Fun√ß√£o para conversar com o sistema.
    O sistema responde com base nos comandos aprendidos.
    """
    aprendizados = carregar_aprendizados()
    print("üí¨ Vamos conversar! (digite 'sair' para encerrar a conversa)\n")
    while True:
        entrada = input("üë§ Voc√™: ").strip().lower()
        if entrada == "sair":
            print("üëã At√© logo!")
            break
        resposta = aprendizados.get(entrada, "ü§ñ Ainda n√£o aprendi isso.")
        print("ü§ñ Egregoro:", resposta)

def menu():
    """
    Fun√ß√£o para exibir o menu de op√ß√µes para o usu√°rio.
    """
    while True:
        print("\n===== üåê Egregoro IA =====")
        print("1. Ensinar comando")
        print("2. Executar comando")
        print("3. Ver aprendizados")
        print("4. Conversar livremente")
        print("5. Sair")

        escolha = input("Escolha uma op√ß√£o: ").strip()

        if escolha == "1":
            ensinar()
        elif escolha == "2":
            executar_comando()
        elif escolha == "3":
            ver_aprendizados()
        elif escolha == "4":
            conversar()
        elif escolha == "5":
            print("üõë Encerrando Egregoro...")
            break
        else:
            print("‚ùó Op√ß√£o inv√°lida. Tente novamente.")

if __name__ == "__main__":
    atualizar_repositorio()
    menu()
